package akka.contrib.persistence.mongodb

import reactivemongo.bson.{BSONDocument, BSONHandler, BSONDocumentWriter, BSONDocumentReader}

trait RxMongoBsonReaderWriter[A] {
  private[mongodb] final def readBsonUntyped(document: BSONDocument): AnyRef =
    readBson(document).asInstanceOf[AnyRef]

  private[mongodb] final def writeBsonUntyped(t: AnyRef): BSONDocument =
    writeBson(t.asInstanceOf[A])

  def readBson(document: BSONDocument): A
  def writeBson(t: A): BSONDocument
}

/**
  * Trait applied to companion object of BsonMessage subtypes that exposes a Reactive Mongo
  * BSON handler. The handler is normally generated by the 'handler' macro.
  */
trait RxMongoBsonHandler[A] extends RxMongoBsonReaderWriter[A] {
  def bsonHandler: BSONDocumentReader[A] with BSONDocumentWriter[A] with BSONHandler[BSONDocument, A]

  def readBson(document: BSONDocument): A = bsonHandler.read(document)
  def writeBson(t: A): BSONDocument = bsonHandler.write(t)
}
